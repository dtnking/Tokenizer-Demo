/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_TOKENIZERSTRING_H
#define _MOCK_TOKENIZERSTRING_H

#include "tokenizerstring.h"
#include "CException.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_tokenizerstring_Init(void);
void mock_tokenizerstring_Destroy(void);
void mock_tokenizerstring_Verify(void);




#define tokenizerStringCreate_IgnoreAndReturn(cmock_retval) tokenizerStringCreate_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void tokenizerStringCreate_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, TokenizerString* cmock_to_return);
#define tokenizerStringCreate_ExpectAndReturn(str, cmock_retval) tokenizerStringCreate_CMockExpectAndReturn(__LINE__, str, cmock_retval)
void tokenizerStringCreate_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, char* str, TokenizerString* cmock_to_return);
typedef TokenizerString* (* CMOCK_tokenizerStringCreate_CALLBACK)(char* str, int cmock_num_calls);
void tokenizerStringCreate_StubWithCallback(CMOCK_tokenizerStringCreate_CALLBACK Callback);
#define tokenizerStringCreate_ExpectAndThrow(str, cmock_to_throw) tokenizerStringCreate_CMockExpectAndThrow(__LINE__, str, cmock_to_throw)
void tokenizerStringCreate_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, char* str, CEXCEPTION_T cmock_to_throw);
#define tokenizerStringFree_Ignore() tokenizerStringFree_CMockIgnore()
void tokenizerStringFree_CMockIgnore(void);
#define tokenizerStringFree_Expect(tokStr) tokenizerStringFree_CMockExpect(__LINE__, tokStr)
void tokenizerStringFree_CMockExpect(UNITY_LINE_TYPE cmock_line, TokenizerString* tokStr);
typedef void (* CMOCK_tokenizerStringFree_CALLBACK)(TokenizerString* tokStr, int cmock_num_calls);
void tokenizerStringFree_StubWithCallback(CMOCK_tokenizerStringFree_CALLBACK Callback);
#define tokenizerStringFree_ExpectAndThrow(tokStr, cmock_to_throw) tokenizerStringFree_CMockExpectAndThrow(__LINE__, tokStr, cmock_to_throw)
void tokenizerStringFree_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, TokenizerString* tokStr, CEXCEPTION_T cmock_to_throw);

#endif
